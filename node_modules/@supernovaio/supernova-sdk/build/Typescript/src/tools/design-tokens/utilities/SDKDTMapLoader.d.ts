import { TokenGroup } from '../../..';
import { DTProcessedTokenNode } from './SDKDTJSONConverter';
import { DTParsedNode } from './SDKDTJSONLoader';
export declare type DTPluginToSupernovaMapPack = Array<DTPluginToSupernovaMap>;
export declare enum DTPluginToSupernovaMapType {
    theme = "theme",
    set = "set"
}
export declare type DTPluginToSupernovaMap = {
    type: DTPluginToSupernovaMapType;
    pluginSets: Array<string> | null;
    pluginTheme: string | null;
    bindToBrand: string;
    bindToTheme: string | null;
    nodes: Array<DTParsedNode> | null;
    processedNodes: Array<DTProcessedTokenNode> | null;
    processedGroups: Array<TokenGroup> | null;
};
export declare type DTPluginToSupernovaMappingFile = {
    mode: 'single-file' | 'multi-file';
    mapping: [
        {
            tokensTheme?: string;
            tokenSets?: Array<string>;
            supernovaBrand: string;
            supernovaTheme?: string;
        }
    ];
    settings?: {
        verbose?: boolean;
        dryRun?: boolean;
        preciseCopy?: boolean;
    };
};
export declare type DTPluginToSupernovaSettings = {
    verbose: boolean;
    dryRun: boolean;
    preciseCopy: boolean;
};
/** Utility to load token maps */
export declare class DTMapLoader {
    constructor();
    loadFromPath(pathToFile: string): {
        mapping: DTPluginToSupernovaMapPack;
        settings: DTPluginToSupernovaSettings;
    };
    weakValidateMapping(mapping: DTPluginToSupernovaMappingFile): void;
    processFileToMapping(mapping: DTPluginToSupernovaMappingFile): {
        mapping: DTPluginToSupernovaMapPack;
        settings: DTPluginToSupernovaSettings;
    };
    private parseDefinition;
}
