import { AxiosRequestConfig } from 'axios';
import { DataCore } from './SDKDataCore';
declare type DataBridgeRequestHookResult = {
    skipDefaultAuth?: boolean;
};
export declare type DataBridgeRequestHook = (request: AxiosRequestConfig) => void | DataBridgeRequestHookResult | Promise<void | DataBridgeRequestHookResult>;
export interface DataBridgeConfiguration {
    apiUrl: string;
    apiVersion: string;
    accessToken: string;
    target: string | null;
    cache: boolean;
    requestHook: DataBridgeRequestHook | null;
}
export declare class DataBridge {
    authToken: string;
    cache: boolean;
    dataCore: DataCore;
    apiUrl: string;
    apiVersion: string;
    target: string | null;
    requestHook: DataBridgeRequestHook | null;
    constructor(conf: DataBridgeConfiguration);
    getDSMGenericDataFromEndpoint(endpoint: string): Promise<any>;
    getDSMDataFromEndpoint(designSystemId: string, designSystemVersionId: string, endpoint: string): Promise<any>;
    private buildRequestConfig;
    private getDataForAuthenticatedEndpoint;
    postDSMDataToEndpoint(designSystemId: string, designSystemVersionId: string, endpoint: string, data: any, put?: boolean): Promise<any>;
    private postDataForAuthenticatedEndpoint;
    dsGenericRequestURL(): string;
    dsWorkspaceRequestURL(wsId: string): string;
    dsDataRequestURL(dsId: string, dsVersionId: string): string;
    dsMetadataRequestURL(dsId: string): string;
    dsVersionRequestURL(dsId: string): string;
}
export {};
