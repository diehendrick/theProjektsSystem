"use strict";
//
//  describe-workspaces.ts
//  Supernova CLI
//
//  Created by Jiri Trecak.
//  Copyright © 2022 Supernova.io. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncDesignTokens = void 0;
// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
// MARK: - Imports
const core_1 = require("@oclif/core");
const supernova_sdk_1 = require("@supernovaio/supernova-sdk");
// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
// MARK: - Configuration
// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
// MARK: - Tool implementation
/** Command that describes the structure of provided design system */
class SyncDesignTokens extends core_1.Command {
    // --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
    // MARK: - Command runtime
    async run() {
        const { args, flags } = await this.parse(SyncDesignTokens);
        // Get workspaces
        let connected = await this.getWorkspaces(flags);
        for (let workspace of connected.workspaces) {
            // Get design systems and log
            let designSystems = await workspace.designSystems();
            console.log(`\n`);
            console.log(`---  Workspace "${workspace.name}", handle: "${workspace.handle}":`);
            for (let designSystem of designSystems) {
                console.log(`\n`);
                console.log(`  ↳  DS "${designSystem.name}", id: ${designSystem.id}:`);
                let version = await designSystem.activeVersion();
                let brands = await version.brands();
                let themes = await version.themes();
                for (let brand of brands) {
                    console.log(`    ↳  Brand: "${brand.name}", id: ${brand.persistentId}`);
                    let brandThemes = themes.filter((t) => t.brandId === brand.persistentId);
                    if (brandThemes.length > 0) {
                        for (let theme of brandThemes) {
                            console.log(`      ↳ Theme: "${theme.name}", id: ${theme.id}`);
                        }
                    }
                    else {
                        console.log(`      ↳ No themes defined in this brand`);
                    }
                }
            }
        }
    }
    async getWorkspaces(flags) {
        if (!flags.apiKey || flags.apiKey.length === 0) {
            throw new Error(`API key must not be empty`);
        }
        // Create instance for prod / dev
        const devAPIhost = "https://dev.api2.supernova.io/api";
        let sdkInstance = new supernova_sdk_1.Supernova(flags.apiKey, flags.dev ? devAPIhost : null, null);
        let workspaces = await sdkInstance.workspaces();
        return {
            instance: sdkInstance,
            workspaces: workspaces,
        };
    }
}
exports.SyncDesignTokens = SyncDesignTokens;
// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
// MARK: - Command configuration
// Command help description
SyncDesignTokens.description = "Describe structure of all workspaces and design systems available under those workspaces available for specified API key";
// Examples how to use the command
SyncDesignTokens.examples = [`$ @supernovaio/cli describe-workspaces --apiKey="{xxx-xxx-xxx}"`];
// Static flags to enable / disable features
SyncDesignTokens.flags = {
    apiKey: core_1.Flags.string({ description: "API key to use for accessing Supernova instance", required: true }),
    dev: core_1.Flags.boolean({ description: "When enabled, CLI will target dev server", hidden: true, default: false }),
};
// Required and optional attributes
SyncDesignTokens.args = [];
