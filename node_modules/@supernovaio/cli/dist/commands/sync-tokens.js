"use strict";
//
//  sync-tokens.ts
//  Supernova CLI
//
//  Created by Jiri Trecak.
//  Copyright © 2022 Supernova.io. All rights reserved.
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncDesignTokens = void 0;
// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
// MARK: - Imports
const core_1 = require("@oclif/core");
const supernova_sdk_1 = require("@supernovaio/supernova-sdk");
// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
// MARK: - Configuration
// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
// MARK: - Tool implementation
/** Command that handles synchronization with design tokens plugin */
class SyncDesignTokens extends core_1.Command {
    // --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
    // MARK: - Command runtime
    async run() {
        const { args, flags } = await this.parse(SyncDesignTokens);
        // Get workspace -> design system –> version
        let connected = await this.getWritableVersion(flags);
        let dsTool = new supernova_sdk_1.SupernovaToolsDesignTokensPlugin(connected.version);
        if (flags.tokenDirPath) {
            await dsTool.synchronizeTokensFromDirectory(flags.tokenDirPath, flags.configFilePath);
        }
        else if (flags.tokenFilePath) {
            await dsTool.synchronizeTokensFromFile(flags.tokenFilePath, flags.configFilePath);
        }
        this.log(`Tokens synchronized`);
    }
    async getWritableVersion(flags) {
        if (!flags.apiKey || flags.apiKey.length === 0) {
            throw new Error(`API key must not be empty`);
        }
        if (!flags.designSystemId || flags.designSystemId.length === 0) {
            throw new Error(`Design System ID must not be empty`);
        }
        // Create instance for prod / dev
        const devAPIhost = "https://dev.api2.supernova.io/api";
        let sdkInstance = new supernova_sdk_1.Supernova(flags.apiKey, flags.dev ? devAPIhost : null, null);
        let designSystem = await sdkInstance.designSystem(flags.designSystemId);
        if (!designSystem) {
            throw new Error(`Design system ${flags.designSystemId} not found or not available under provided API key`);
        }
        let version = await designSystem.activeVersion();
        if (!version) {
            throw new Error(`Design system  ${flags.designSystemId} writable version not found or not available under provided API key`);
        }
        return {
            instance: sdkInstance,
            designSystem: designSystem,
            version: version,
        };
    }
}
exports.SyncDesignTokens = SyncDesignTokens;
// --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---
// MARK: - Command configuration
// Command help description
SyncDesignTokens.description = "Synchronize tokens from Figma Tokens plugin to Supernova workspaces";
// Examples how to use the command
SyncDesignTokens.examples = [
    `$ @supernovaio/cli sync-tokens --apiKey="{xxx-xxx-xxx}" --designSystemId={1234} --tokenFilePath "/path/to/tokens.json" --configFilePath "/path/to/config.json"`,
    `$ @supernovaio/cli sync-tokens --apiKey="{xxx-xxx-xxx}" --designSystemId={1234} --tokenDirPath "/path/to/tokens/" --configFilePath "/path/to/config.json"`,
];
// Static flags to enable / disable features
SyncDesignTokens.flags = {
    apiKey: core_1.Flags.string({ description: "API key to use for accessing Supernova instance", required: true }),
    designSystemId: core_1.Flags.string({ description: "Design System to synchronize contents with", required: true }),
    tokenFilePath: core_1.Flags.string({
        description: "Path to JSON file containing token definitions",
        exactlyOne: ["tokenDirPath", "tokenFilePath"],
    }),
    tokenDirPath: core_1.Flags.string({
        description: "Path to directory of JSON files containing token definitions",
        exactlyOne: ["tokenDirPath", "tokenFilePath"],
    }),
    configFilePath: core_1.Flags.string({ description: "Path to configuration JSON file", required: true, exclusive: [] }),
    dev: core_1.Flags.boolean({ description: "When enabled, CLI will target dev server", hidden: true, default: false }),
};
// Required and optional attributes
SyncDesignTokens.args = [];
